using System;
using System.IO;
using System.Text;
using System.Xml;

namespace Rss
{
	// Token: 0x0200008C RID: 140
	public class RssWriter
	{
		// Token: 0x0600069D RID: 1693 RVA: 0x000255E5 File Offset: 0x000237E5
		public RssWriter(TextWriter textWriter)
		{
			this.writer = new XmlTextWriter(textWriter);
		}

		// Token: 0x0600069E RID: 1694 RVA: 0x00025619 File Offset: 0x00023819
		public RssWriter(Stream stream, Encoding encoding)
		{
			this.writer = new XmlTextWriter(stream, encoding);
		}

		// Token: 0x0600069F RID: 1695 RVA: 0x0002564E File Offset: 0x0002384E
		public RssWriter(Stream stream)
		{
			this.writer = new XmlTextWriter(stream, Encoding.GetEncoding("ISO-8859-1"));
		}

		// Token: 0x060006A0 RID: 1696 RVA: 0x0002568C File Offset: 0x0002388C
		public RssWriter(string fileName, Encoding encoding)
		{
			this.writer = new XmlTextWriter(fileName, encoding);
		}

		// Token: 0x060006A1 RID: 1697 RVA: 0x000256C1 File Offset: 0x000238C1
		public RssWriter(string fileName)
		{
			this.writer = new XmlTextWriter(fileName, Encoding.GetEncoding("ISO-8859-1"));
		}

		// Token: 0x060006A2 RID: 1698 RVA: 0x00025700 File Offset: 0x00023900
		private void BeginDocument()
		{
			if (!this.wroteStartDocument)
			{
				if (this.rssVersion == RssVersion.Empty)
				{
					this.rssVersion = RssVersion.RSS20;
				}
				this.writer.Formatting = this.xmlFormat;
				this.writer.Indentation = this.xmlIndentation;
				this.writer.WriteStartDocument();
				if (this.rssVersion != RssVersion.RSS20)
				{
					this.writer.WriteComment("Generated by RSS.NET: http://rss-net.sf.net");
				}
				switch (this.rssVersion)
				{
				case RssVersion.RSS090:
					this.writer.WriteStartElement("RDF", "rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#");
					break;
				case RssVersion.RSS091:
					this.writer.WriteStartElement("rss");
					this.writer.WriteDocType("rss", "-//Netscape Communications//DTD RSS 0.91//EN", "http://my.netscape.com/publish/formats/rss-0.91.dtd", null);
					this.writer.WriteAttributeString("version", "0.91");
					break;
				case RssVersion.RSS092:
					this.writer.WriteStartElement("rss");
					this.writer.WriteAttributeString("version", "0.92");
					break;
				case RssVersion.RSS10:
					throw new NotSupportedException("RDF Site Summary (RSS) 1.0 is not currently supported.");
				case RssVersion.RSS20:
					this.writer.WriteStartElement("rss");
					this.writer.WriteAttributeString("version", "2.0");
					foreach (RssModule rssModule in this._rssModules)
					{
						this.WriteAttribute("xmlns:" + rssModule.NamespacePrefix, rssModule.NamespaceURL.ToString(), true);
					}
					break;
				}
				this.wroteStartDocument = true;
			}
		}

		// Token: 0x060006A3 RID: 1699 RVA: 0x000258C4 File Offset: 0x00023AC4
		private void writeChannel(RssChannel channel)
		{
			if (this.writer == null)
			{
				throw new InvalidOperationException("RssWriter has been closed, and can not be written to.");
			}
			if (channel == null)
			{
				throw new ArgumentNullException("Channel must be instanciated with data to be written.");
			}
			if (this.wroteChannel)
			{
				this.writer.WriteEndElement();
			}
			else
			{
				this.wroteChannel = true;
			}
			this.BeginDocument();
			this.writer.WriteStartElement("channel");
			this.WriteElement("title", channel.Title, true);
			this.WriteElement("description", channel.Description, true);
			this.WriteElement("link", channel.Link, true);
			if (channel.Image != null)
			{
				this.writer.WriteStartElement("image");
				this.WriteElement("title", channel.Image.Title, true);
				this.WriteElement("url", channel.Image.Url, true);
				this.WriteElement("link", channel.Image.Link, true);
				switch (this.rssVersion)
				{
				case RssVersion.RSS091:
				case RssVersion.RSS092:
				case RssVersion.RSS20:
					this.WriteElement("description", channel.Image.Description, false);
					this.WriteElement("width", channel.Image.Width, false);
					this.WriteElement("height", channel.Image.Height, false);
					break;
				}
				this.writer.WriteEndElement();
			}
			switch (this.rssVersion)
			{
			case RssVersion.RSS091:
			case RssVersion.RSS092:
			case RssVersion.RSS20:
			{
				this.WriteElement("language", channel.Language, this.rssVersion == RssVersion.RSS091);
				this.WriteElement("copyright", channel.Copyright, false);
				this.WriteElement("managingEditor", channel.ManagingEditor, false);
				this.WriteElement("webMaster", channel.WebMaster, false);
				this.WriteElement("pubDate", channel.PubDate, false);
				this.WriteElement("lastBuildDate", channel.LastBuildDate, false);
				if (channel.Docs != "")
				{
					this.WriteElement("docs", channel.Docs, false);
				}
				else
				{
					switch (this.rssVersion)
					{
					case RssVersion.RSS091:
						this.WriteElement("docs", "http://my.netscape.com/publish/formats/rss-spec-0.91.html", false);
						break;
					case RssVersion.RSS092:
						this.WriteElement("docs", "http://backend.userland.com/rss092", false);
						break;
					case RssVersion.RSS20:
						this.WriteElement("docs", "http://backend.userland.com/rss", false);
						break;
					}
				}
				this.WriteElement("rating", channel.Rating, false);
				string[] array = new string[]
				{
					"monday",
					"tuesday",
					"wednesday",
					"thursday",
					"friday",
					"saturday",
					"sunday"
				};
				for (int i = 0; i <= 6; i++)
				{
					if (channel.SkipDays[i])
					{
						this.writer.WriteStartElement("skipDays");
						for (int j = 0; j <= 6; j++)
						{
							if (channel.SkipDays[j])
							{
								this.WriteElement("day", array[j], false);
							}
						}
						this.writer.WriteEndElement();
						break;
					}
				}
				for (int k = 0; k <= 23; k++)
				{
					if (channel.SkipHours[k])
					{
						this.writer.WriteStartElement("skipHours");
						for (int l = 0; l <= 23; l++)
						{
							if (channel.SkipHours[l])
							{
								this.WriteElement("hour", l + 1, false);
							}
						}
						this.writer.WriteEndElement();
						break;
					}
				}
				break;
			}
			}
			switch (this.rssVersion)
			{
			case RssVersion.RSS092:
			case RssVersion.RSS20:
				if (channel.Categories != null)
				{
					foreach (RssCategory rssCategory in channel.Categories)
					{
						if (rssCategory.Name != "")
						{
							this.writer.WriteStartElement("category");
							this.WriteAttribute("domain", rssCategory.Domain, false);
							this.writer.WriteString(rssCategory.Name);
							this.writer.WriteEndElement();
						}
					}
				}
				if (channel.Cloud != null)
				{
					this.writer.WriteStartElement("cloud");
					this.WriteElement("domain", channel.Cloud.Domain, false);
					this.WriteElement("port", channel.Cloud.Port, false);
					this.WriteElement("path", channel.Cloud.Path, false);
					this.WriteElement("registerProcedure", channel.Cloud.RegisterProcedure, false);
					if (channel.Cloud.Protocol != RssCloudProtocol.Empty)
					{
						this.WriteElement("Protocol", channel.Cloud.Protocol, false);
					}
					this.writer.WriteEndElement();
				}
				break;
			}
			if (this.rssVersion == RssVersion.RSS20)
			{
				if (channel.Generator != "")
				{
					this.WriteElement("generator", channel.Generator, false);
				}
				else
				{
					this.WriteElement("generator", "RSS.NET: http://www.rssdotnet.com/", false);
				}
				this.WriteElement("ttl", channel.TimeToLive, false);
				foreach (RssModule rssModule in this._rssModules)
				{
					if (rssModule.IsBoundTo(channel.GetHashCode()))
					{
						foreach (RssModuleItem rssModuleItem in rssModule.ChannelExtensions)
						{
							if (rssModuleItem.SubElements.Count == 0)
							{
								this.WriteElement(rssModule.NamespacePrefix + ":" + rssModuleItem.Name, rssModuleItem.Text, rssModuleItem.IsRequired);
							}
							else
							{
								this.writeSubElements(rssModuleItem.SubElements, rssModule.NamespacePrefix);
							}
						}
					}
				}
			}
			if (channel.TextInput != null)
			{
				this.writer.WriteStartElement("textinput");
				this.WriteElement("title", channel.TextInput.Title, true);
				this.WriteElement("description", channel.TextInput.Description, true);
				this.WriteElement("name", channel.TextInput.Name, true);
				this.WriteElement("link", channel.TextInput.Link, true);
				this.writer.WriteEndElement();
			}
			foreach (RssItem item in channel.Items)
			{
				this.writeItem(item, channel.GetHashCode());
			}
			this.writer.Flush();
		}

		// Token: 0x060006A4 RID: 1700 RVA: 0x00026004 File Offset: 0x00024204
		private void writeItem(RssItem item, int channelHashCode)
		{
			if (this.writer == null)
			{
				throw new InvalidOperationException("RssWriter has been closed, and can not be written to.");
			}
			if (item == null)
			{
				throw new ArgumentNullException("Item must be instanciated with data to be written.");
			}
			if (!this.wroteChannel)
			{
				throw new InvalidOperationException("Channel must be written first, before writing an item.");
			}
			this.BeginDocument();
			this.writer.WriteStartElement("item");
			switch (this.rssVersion)
			{
			case RssVersion.RSS090:
			case RssVersion.RSS091:
			case RssVersion.RSS10:
				this.WriteElement("title", item.Title, true);
				this.WriteElement("description", item.Description, false);
				this.WriteElement("link", item.Link, true);
				goto IL_256;
			case RssVersion.RSS092:
				break;
			case RssVersion.RSS20:
				if (item.Title == "" && item.Description == "")
				{
					throw new ArgumentException("item title and description cannot be null");
				}
				break;
			default:
				goto IL_256;
			}
			this.WriteElement("title", item.Title, false);
			this.WriteElement("description", item.Description, false);
			this.WriteElement("link", item.Link, false);
			if (item.Source != null)
			{
				this.writer.WriteStartElement("source");
				this.WriteAttribute("url", item.Source.Url, true);
				this.writer.WriteString(item.Source.Name);
				this.writer.WriteEndElement();
			}
			if (item.Enclosure != null)
			{
				this.writer.WriteStartElement("enclosure");
				this.WriteAttribute("url", item.Enclosure.Url, true);
				this.WriteAttribute("length", item.Enclosure.Length, true);
				this.WriteAttribute("type", item.Enclosure.Type, true);
				this.writer.WriteEndElement();
			}
			foreach (RssCategory rssCategory in item.Categories)
			{
				if (rssCategory.Name != "")
				{
					this.writer.WriteStartElement("category");
					this.WriteAttribute("domain", rssCategory.Domain, false);
					this.writer.WriteString(rssCategory.Name);
					this.writer.WriteEndElement();
				}
			}
			IL_256:
			if (this.rssVersion == RssVersion.RSS20)
			{
				this.WriteElement("author", item.Author, false);
				this.WriteElement("comments", item.Comments, false);
				if (item.Guid != null && item.Guid.Name != "")
				{
					this.writer.WriteStartElement("guid");
					try
					{
						this.WriteAttribute("isPermaLink", (bool)item.Guid.PermaLink, false);
					}
					catch
					{
					}
					this.writer.WriteString(item.Guid.Name);
					this.writer.WriteEndElement();
				}
				this.WriteElement("pubDate", item.PubDate, false);
				foreach (RssModule rssModule in this._rssModules)
				{
					if (rssModule.IsBoundTo(channelHashCode))
					{
						foreach (RssModuleItemCollection rssModuleItemCollection in rssModule.ItemExtensions)
						{
							if (rssModuleItemCollection.IsBoundTo(item.GetHashCode()))
							{
								this.writeSubElements(rssModuleItemCollection, rssModule.NamespacePrefix);
							}
						}
					}
				}
			}
			this.writer.WriteEndElement();
			this.writer.Flush();
		}

		// Token: 0x060006A5 RID: 1701 RVA: 0x00026408 File Offset: 0x00024608
		public void Close()
		{
			if (this.writer == null)
			{
				throw new InvalidOperationException("RssWriter has been closed, and can not be closed again.");
			}
			if (!this.wroteChannel)
			{
				throw new InvalidOperationException("Can't close RssWriter without first writing a channel.");
			}
			this.writer.WriteEndElement();
			this.writer.WriteEndElement();
			this.writer.Close();
			this.writer = null;
		}

		// Token: 0x1700021C RID: 540
		// (get) Token: 0x060006A6 RID: 1702 RVA: 0x00026463 File Offset: 0x00024663
		// (set) Token: 0x060006A7 RID: 1703 RVA: 0x0002646B File Offset: 0x0002466B
		public RssVersion Version
		{
			get
			{
				return this.rssVersion;
			}
			set
			{
				if (this.wroteStartDocument)
				{
					throw new InvalidOperationException("Can't change version number after data has been written.");
				}
				this.rssVersion = value;
			}
		}

		// Token: 0x1700021D RID: 541
		// (get) Token: 0x060006A8 RID: 1704 RVA: 0x00026487 File Offset: 0x00024687
		// (set) Token: 0x060006A9 RID: 1705 RVA: 0x0002648F File Offset: 0x0002468F
		public Formatting XmlFormat
		{
			get
			{
				return this.xmlFormat;
			}
			set
			{
				if (this.wroteStartDocument)
				{
					throw new InvalidOperationException("Can't change XML formatting after data has been written.");
				}
				this.xmlFormat = value;
			}
		}

		// Token: 0x1700021E RID: 542
		// (get) Token: 0x060006AA RID: 1706 RVA: 0x000264AB File Offset: 0x000246AB
		// (set) Token: 0x060006AB RID: 1707 RVA: 0x000264B3 File Offset: 0x000246B3
		public int XmlIndentation
		{
			get
			{
				return this.xmlIndentation;
			}
			set
			{
				if (this.wroteStartDocument)
				{
					throw new InvalidOperationException("Can't change XML indentation after data has been written.");
				}
				if (value < 0)
				{
					throw new ArgumentException("Setting this property to a negative value.");
				}
				this.xmlIndentation = value;
			}
		}

		// Token: 0x060006AC RID: 1708 RVA: 0x000264DE File Offset: 0x000246DE
		public void Write(RssChannel channel)
		{
			this.writeChannel(channel);
		}

		// Token: 0x060006AD RID: 1709 RVA: 0x000264E7 File Offset: 0x000246E7
		public void Write(RssItem item)
		{
			this.writeItem(item, -1);
		}

		// Token: 0x1700021F RID: 543
		// (get) Token: 0x060006AE RID: 1710 RVA: 0x000264F1 File Offset: 0x000246F1
		// (set) Token: 0x060006AF RID: 1711 RVA: 0x000264F9 File Offset: 0x000246F9
		public RssModuleCollection Modules
		{
			get
			{
				return this._rssModules;
			}
			set
			{
				this._rssModules = value;
			}
		}

		// Token: 0x060006B0 RID: 1712 RVA: 0x00026502 File Offset: 0x00024702
		private void WriteElement(string localName, DateTime input, bool required)
		{
			if (input != RssDefault.DateTime)
			{
				this.writer.WriteElementString(localName, XmlConvert.ToString(input, "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'"));
				return;
			}
			if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060006B1 RID: 1713 RVA: 0x0002653D File Offset: 0x0002473D
		private void WriteElement(string localName, int input, bool required)
		{
			if (input != -1)
			{
				this.writer.WriteElementString(localName, XmlConvert.ToString(input));
				return;
			}
			if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060006B2 RID: 1714 RVA: 0x0002656A File Offset: 0x0002476A
		private void WriteElement(string localName, string input, bool required)
		{
			if (input != "")
			{
				this.writer.WriteElementString(localName, input);
				return;
			}
			if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060006B3 RID: 1715 RVA: 0x0002659B File Offset: 0x0002479B
		private void WriteElement(string localName, Uri input, bool required)
		{
			if (input != RssDefault.Uri)
			{
				this.writer.WriteElementString(localName, input.ToString());
				return;
			}
			if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060006B4 RID: 1716 RVA: 0x000265D1 File Offset: 0x000247D1
		private void WriteElement(string localName, object input, bool required)
		{
			if (input != null)
			{
				this.writer.WriteElementString(localName, input.ToString());
				return;
			}
			if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060006B5 RID: 1717 RVA: 0x000265FD File Offset: 0x000247FD
		private void WriteAttribute(string localName, DateTime input, bool required)
		{
			if (input != RssDefault.DateTime)
			{
				this.writer.WriteAttributeString(localName, XmlConvert.ToString(input, "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'"));
				return;
			}
			if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060006B6 RID: 1718 RVA: 0x00026638 File Offset: 0x00024838
		private void WriteAttribute(string localName, int input, bool required)
		{
			if (input != -1)
			{
				this.writer.WriteAttributeString(localName, XmlConvert.ToString(input));
				return;
			}
			if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060006B7 RID: 1719 RVA: 0x00026665 File Offset: 0x00024865
		private void WriteAttribute(string localName, string input, bool required)
		{
			if (input != "")
			{
				this.writer.WriteAttributeString(localName, input);
				return;
			}
			if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060006B8 RID: 1720 RVA: 0x00026696 File Offset: 0x00024896
		private void WriteAttribute(string localName, Uri input, bool required)
		{
			if (input != RssDefault.Uri)
			{
				this.writer.WriteAttributeString(localName, input.ToString());
				return;
			}
			if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060006B9 RID: 1721 RVA: 0x000266CC File Offset: 0x000248CC
		private void WriteAttribute(string localName, object input, bool required)
		{
			if (input != null)
			{
				this.writer.WriteAttributeString(localName, input.ToString());
				return;
			}
			if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060006BA RID: 1722 RVA: 0x000266F8 File Offset: 0x000248F8
		private void writeSubElements(RssModuleItemCollection items, string NamespacePrefix)
		{
			foreach (RssModuleItem rssModuleItem in items)
			{
				if (rssModuleItem.SubElements.Count == 0)
				{
					this.WriteElement(NamespacePrefix + ":" + rssModuleItem.Name, rssModuleItem.Text, rssModuleItem.IsRequired);
				}
				else
				{
					this.writer.WriteStartElement(NamespacePrefix + ":" + rssModuleItem.Name);
					this.writeSubElements(rssModuleItem.SubElements, NamespacePrefix);
					this.writer.WriteEndElement();
				}
			}
		}

		// Token: 0x04000312 RID: 786
		private const string DateTimeFormatString = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";

		// Token: 0x04000313 RID: 787
		private XmlTextWriter writer;

		// Token: 0x04000314 RID: 788
		private bool wroteStartDocument;

		// Token: 0x04000315 RID: 789
		private bool wroteChannel;

		// Token: 0x04000316 RID: 790
		private RssVersion rssVersion = RssVersion.RSS20;

		// Token: 0x04000317 RID: 791
		private Formatting xmlFormat = Formatting.Indented;

		// Token: 0x04000318 RID: 792
		private int xmlIndentation = 2;

		// Token: 0x04000319 RID: 793
		private RssModuleCollection _rssModules = new RssModuleCollection();
	}
}
